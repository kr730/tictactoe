let Player,Board;_141‍.x([["Game",()=>Game]]);_141‍.w("./player",[["Player",["Player"],function(v){Player=v}]]);_141‍.w("./board",[["Board",["Board"],function(v){Board=v}]]);


// class Cell {
//
//     constructor() {
//         this.sign = null;
//     }
//
//     update(sign) {
//         if (this.sign !== null){
//             throw new Error('this cell is not empty');
//         }
//         this.sign = sign;
//     }
// }
//
// class Board {
//     constructor(){
//         this.cells = [
//             [new Cell(), new Cell(), new Cell()],
//             [new Cell(), new Cell(), new Cell()],
//             [new Cell(), new Cell(), new Cell()]
//         ]
//     }
// }
//
// class Player {
//     constructor(sign) {
//         this.sign = sign;
//     }
//
//     click(cell) {
//         cell.update(this.sign);
//     }
// }

       class Game {
    constructor() {
        this.cross = new Player('x');
        this.zero = new Player('o');
        this.board = new Board();
        this.turns = 0;
        this.winner = null;
    }

    makeTurn(x, y) {
        const cell = this.board.cells[x][y];
        const player = this.turns % 2 ? this.cross : this.zero;

        console.log(`cell: (${x}, ${y}), player: ${player.sign}`);
        player.click(cell);
        if(this.isWinner(player)){
            console.log(`player ${player.sign} won!`);
            this.winner = player;
        }

        this.turns++;
    }

    isWinner(currentPlayer) { // todo refactor
        let cell = this.board.cells;
        let count = 0;
        for(let i = 0; i < cell.length; i++){
            for(let j = 0; j < cell[i].length; j++){
                if(cell[i][j].sign == currentPlayer.sign){
                    count++;
                }
                if(count == cell.length){
                    return true;
                }
            }
            count = 0;
        }
        for (let i = 0; i < cell.length; i++) {
            for (let j = 0; j < cell.length; j++) {
                if(cell[j][i].sign == currentPlayer.sign){
                    count++;
                }
                if(count == cell[i].length){
                    return true;
                }
            }
            count = 0;
        }
        for (let i = 0; i < cell.length ; i++) {
            if (cell[i][i].sign == currentPlayer.sign) {
                count++;
            }
            if (count == cell[i].length) {
                return true;
            }

        }
        count = 0;
        for (let i = 0; i < cell.length; i++) {
            if (cell[i][cell.length-1-i].sign == currentPlayer.sign) {
                count++;
            }
            if (count == cell[i].length) {
                return true;
            }
            count = 0;
        }
        return false;

    }
}


const game = new Game();

game.makeTurn(0, 0); //

game.makeTurn(0, 1);

game.makeTurn(1, 1);

game.makeTurn(0, 2);

game.makeTurn(2, 2);

_141‍.g.console.log('Winner', game.winner.sign);
